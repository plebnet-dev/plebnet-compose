{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"plebnet-compose","text":"<p>Introduction to Docker and Docker compose</p>"},{"location":"index.html#setup","title":"Setup","text":""},{"location":"index.html#clone-this-repo","title":"Clone this repo","text":"<pre><code>git clone https://github.com/plebnet-dev/plebnet-compose\n</code></pre>"},{"location":"index.html#install-docker","title":"Install docker","text":"<p>Install docker for desktop here https://docs.docker.com/engine/install/#desktop</p> <p>This will allow you to run <code>docker</code> and <code>docker compose</code> commands</p>"},{"location":"build.html","title":"Build","text":""},{"location":"build.html#build","title":"Build","text":"<p>Docker images are created using a <code>Dockerfile</code>, which is a text file containing instructions on how to build the image. </p> <p>The <code>docs.Dockerfile</code> (in the base of this repo) includes this container's build recipe</p> <pre><code>FROM condaforge/miniforge3:latest\nLABEL maintainer \"Asher Pembroke &lt;apembroke@gmail.com&gt;\"\n\n# use pip's --no-cache-dir option to avoid caching, which can reduce the image size\nRUN pip install --no-cache-dir mkdocs python-markdown-math markdown-include pygments mkdocs-material\n\nWORKDIR /code\n\nCMD mkdocs serve -a 0.0.0.0:8000\n</code></pre> <p>You can build a container from a single dockerfile like this:</p> <pre><code>docker build -f docs.Dockerfile -t plebnet-compose:v1 --load .\n</code></pre> <p>This builds the image and gives it the name <code>plebenet-compose</code> and tag <code>v1</code></p> <pre><code>docker images\n\nREPOSITORY          TAG       IMAGE ID       CREATED         SIZE\nplebnet-compose     v1        6b50b5681519   4 minutes ago   475MB\n...\n</code></pre> <p>This way of building is fine when there is only one image. We'll see in a moment how to do this with <code>compose</code></p>"},{"location":"compose.html","title":"Compose","text":"<p>Docker compose simplifies the process of building and running containers by putting all the run options in a single <code>docker-compose.yml</code> config file.</p> <p>As an example, here's this project's docker-compose.yml</p> <pre><code>version: \"3.9\"\n\nservices:\n  docs:\n    image: plebnet-compose\n    ports:\n      - \"8000:8000\"\n    build:\n      context: .\n      dockerfile: docs.Dockerfile\n    volumes:\n      - .:/code\n    container_name: rigly-backend-docs\n    command:\n      - mkdocs\n      - serve\n      - -a\n      - 0.0.0.0:8000\n</code></pre> <p>This allows us to run (or build) the container with a single command:</p> <pre><code>docker compose up docs\n# container running at localhost:8000 or 0.0.0.0:8000\n</code></pre> <p>The above command will automatically build the image if it hasn't already been built.</p> <p>We can also force a rebuild like this:</p> <pre><code>docker compose build docs\n</code></pre>"},{"location":"containers.html","title":"Containers","text":""},{"location":"containers.html#runtime","title":"Runtime","text":"<p>The runtime environment likely differs from tha</p> <p>Environment variables are used to pass information into the container at run time. This is useful for</p> <ul> <li>config operations (development vs prodcu)</li> <li>private data (API Keys, passwords, etc)</li> </ul>"},{"location":"images.html","title":"Images","text":"<p>A Docker <code>image</code> is a lightweight, stand-alone, executable software package that includes everything needed to run a piece of software, including the code, a runtime, libraries, environment variables, and config files.</p> <p>Images are just data identfiable with hashes. Think of them like bootable disks:</p>  f3d495355b4e  <ul> <li>Code - The actual code that runs your application.</li> <li>Runtime - The runtime environment where your code executes, for instance, Node.js, Python, or Java runtime.</li> <li>Libraries - Any libraries or frameworks your code depends on.</li> <li>Environment Variables - Configurable parameters your code uses to interact with its environment.</li> <li>Config Files - Configuration files which might contain settings or setup information for your application.</li> <li>Dependencies - Other resources or files your application needs to run.</li> </ul>"},{"location":"motivation.html","title":"Motivation","text":"<p>Containers are like very thin virtual machines. We summarize the benefits of this approach below</p>"},{"location":"motivation.html#isolation","title":"isolation","text":"<ul> <li>all requirements are self-contained within an os tailored for the app</li> <li>no dependency conflicts on the host</li> <li>inheritance</li> </ul>"},{"location":"motivation.html#reproducibility","title":"reproducibility","text":"<ul> <li>running the same container years later should produce the same results</li> <li>production version should operate similar to development</li> </ul> <p>The same container can be developed on a laptop and deployed to cloud AWS/Google/Azure or decentralzed environments (Start9/Umbrel)</p>"},{"location":"motivation.html#modularity","title":"modularity","text":"<p>containers can be built up in layers</p> <ul> <li>base layer typically some version of ubuntu</li> <li>upper layers are progressively more app-specific</li> </ul> <p>apps can consist of multiple containers deployed in concert</p> <ul> <li>docker compose (plebnet-playground, Start-9, Umbrel)</li> <li>kubernetes (targets AWS, Google, etc)</li> </ul>"},{"location":"motivation.html#security","title":"security","text":"<p>Containers provide a low risk way to runing other people's apps</p> <ul> <li>host explicitly controls what the container has access to (data paths, network, etc)</li> </ul> <p>Note: other containerizing solutions may be more secure than docker</p> <ul> <li> <p>Podman A daemon-less architecture allowing you to create containers without root access, potentially enhancing security</p> </li> <li> <p>Buildah allows building Open Container Initiative (OCI) container images without a standalone container runtime or daemon, focusing on creating OCI images without Dockerfiles and without needing root privileges.</p> </li> </ul>"},{"location":"run.html","title":"Run","text":""},{"location":"run.html#running-the-container-the-hard-way","title":"running the container (the hard way)","text":"<p><code>docker run</code></p> <ul> <li>This is the basic command used to create and start a container from a specified Docker image.</li> </ul> <pre><code>docker run --rm -v $PWD:/code -p 8000:8000 --name plebnet-container plebnet-compose\n</code></pre> <p><code>--rm</code></p> <ul> <li>This option tells Docker to automatically remove the container when it exits, which helps to keep your system clean by removing containers you no longer need.</li> </ul> <p><code>-v $PWD:/code</code></p> <ul> <li>The <code>-v</code> option is used to create a volume, which allows you to share files between your host system and the container.</li> <li><code>$PWD</code> is an environment variable that holds the current working directory on your host system.</li> <li><code>:/code</code> specifies the path inside the container where the host system's current working directory will be mounted.</li> </ul> <p>So, <code>-v $PWD:/code</code> maps the current working directory on your host system to /code inside the container, allowing files to be shared between the two.</p> <p><code>-p 8000:8000:</code></p> <ul> <li>The <code>-p</code> option is used to map a port on your host system to a port on the container.</li> <li><code>8000:8000</code> maps port <code>8000</code> on your host system to port <code>8000</code> on the container, allowing network traffic to be forwarded between them.</li> </ul> <p><code>--name plebnet-container</code></p> <ul> <li>The <code>--name</code> option allows you to specify a name for the container, making it easier to identify and manage. plebnet-container is the name you've chosen for this container.</li> </ul> <p><code>plebnet-compose</code></p> <p>This is the name of the Docker image from which you want to create the container. The docker run command will create a new container from the plebnet-compose image, using the options specified.</p> <p>Together, this command will create and start a new container named plebnet-container from the plebnet-compose image, with the current working directory on your host system mounted to /code inside the container, and port 8000 on your host system mapped to port 8000 on the container. The container will be automatically removed when it exits due to the --rm option.</p>"},{"location":"run.html#stopping-the-container","title":"stopping the container","text":"<pre><code>docker stop plebnet-container\n</code></pre>"}]}