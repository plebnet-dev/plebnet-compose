{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"plebnet-compose","text":"<p>Introduction to Docker and Docker compose</p>"},{"location":"index.html#setup","title":"Setup","text":""},{"location":"index.html#clone-this-repo","title":"Clone this repo","text":"<pre><code>git clone https://github.com/plebnet-dev/plebnet-compose\n</code></pre>"},{"location":"index.html#install-docker","title":"Install docker","text":"<p>Install docker for desktop here https://docs.docker.com/engine/install/#desktop</p> <p>This will allow you to run <code>docker</code> and <code>docker compose</code> commands</p> <p>To run these docs:</p> <pre><code>docker compose up docs\n</code></pre>"},{"location":"build.html","title":"Build","text":""},{"location":"build.html#build","title":"Build","text":"<p>Docker images are created using a <code>Dockerfile</code>, which is a text file containing instructions on how to build the image. </p> <p>The <code>docs.Dockerfile</code> (in the base of this repo) includes this container's build recipe</p> <pre><code>FROM condaforge/miniforge3:latest\nLABEL maintainer \"Asher Pembroke &lt;apembroke@gmail.com&gt;\"\n\n# use pip's --no-cache-dir option to avoid caching, which can reduce the image size\nRUN pip install --no-cache-dir mkdocs python-markdown-math markdown-include pygments mkdocs-material\n\nWORKDIR /code\n\nCMD mkdocs serve -a 0.0.0.0:8000\n</code></pre> <p>You can build a container from a single dockerfile like this:</p> <pre><code>docker build -f docs.Dockerfile -t plebnet-compose:v1 --load .\n</code></pre> <p>This builds the image and gives it the name <code>plebenet-compose</code> and tag <code>v1</code></p> <pre><code>docker images\n\nREPOSITORY          TAG       IMAGE ID       CREATED         SIZE\nplebnet-compose     v1        6b50b5681519   4 minutes ago   475MB\n...\n</code></pre> <p>This way of building is suitable when there is only one image, but it quickly becomes cumbersome when dealing with multiple related images and services. We'll see in a moment how to handle this with <code>compose</code> Compose.</p>"},{"location":"compose.html","title":"Compose","text":"<p>Compose is a Docker utility that allows you to <code>build</code> and <code>run</code> containers in a reproducible manner, based on a configuration file named <code>docker-compose.yml</code>.</p> <p>Note</p> <p><code>docker-compose</code> (hyphenated) is a standalone python tool which is gradually being replaced by <code>docker compose</code>. You may see it in older tutorials, but it behaves similarly.</p>"},{"location":"compose.html#docker-composeyml","title":"docker-compose.yml","text":"<p>Docker compose simplifies the process of building and running containers by putting all the run options in a single <code>docker-compose.yml</code> config file.</p> <p>As an example, here's this project's <code>docker-compose.yml</code> (we'll cover each section in more detail)</p> <pre><code>version: \"3.9\"\n\nservices:\n  docs:\n    image: plebnet-compose\n    ports:\n      - \"8000:8000\"\n    build:\n      context: .\n      dockerfile: docs.Dockerfile\n    volumes:\n      - .:/code\n    container_name: rigly-backend-docs\n    environment:\n      SITE_NAME: ${SITE_NAME}\n    command:\n      - mkdocs\n      - serve\n      - -a\n      - 0.0.0.0:8000\n\n\n  app:\n    image: my-flask-app:latest\n    build:\n      context: app\n      dockerfile: app.Dockerfile\n    depends_on:\n      - local_db\n    environment:\n      - DB_HOST=local_db\n      - DB_PORT=${DB_PORT_LOCAL}\n      - DB_USER=${DB_USER_LOCAL}\n      - DB_PASS=${DB_PASS_LOCAL}\n      - DB_NAME=${DB_NAME_LOCAL}\n    volumes:\n      - ./app:/usr/src/app\n    depends_on:\n      - local_db\n    ports:\n      - \"8050:8050\"\n\n\n  local_db:\n    image: postgres\n    restart: always\n    volumes:\n      - pgdata:/var/lib/postgresql/data/\n    environment:\n      POSTGRES_USER: ${DB_USER_LOCAL}\n      POSTGRES_PASSWORD: ${DB_PASS_LOCAL}\n      POSTGRES_DB: ${DB_NAME_LOCAL}\n      TZ: ${TZ}\n      POSTGRES_HOST_AUTH_METHOD: trust\n    healthcheck:\n      test: [\"CMD\", \"mysqladmin\", \"ping\", \"-h\", \"${DB_HOST_LOCAL}\"]\n      interval: 5s\n      timeout: 1s\n      retries: 10\n    healthcheck:\n      test:\n        [\n          \"CMD-SHELL\",\n          \"pg_isready -U ${DB_USER_LOCAL} -d ${DB_NAME_LOCAL} -h ${DB_HOST_LOCAL} -p ${DB_PORT_LOCAL}\",\n        ]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n    hostname: ${DB_HOST_LOCAL}\n\nvolumes:\n  pgdata:\n</code></pre>"},{"location":"compose.html#build","title":"Build","text":"<p>We can specify which service to build like this:</p> <pre><code>docker compose build docs\n</code></pre> <p>Or we can build all services at once</p> <pre><code>docker compose build\n</code></pre>"},{"location":"compose.html#run","title":"Run","text":"<p>This allows us to run the container like this</p> <pre><code>docker compose up docs\n# container running at localhost:8000 or 0.0.0.0:8000\n</code></pre> <p>The above command will automatically build the image if it hasn't already been built.</p>"},{"location":"dashboard.html","title":"Dashboard","text":"<p>We demonstrate how apps can connect to databases using the following config.</p> <pre><code>docker compose up app\n# navigate to localhost:8050\n</code></pre>"},{"location":"dashboard.html#defining-a-local-sql-database","title":"Defining a local SQL database","text":"<p>This service references the following <code>local_db</code> service</p> <pre><code>  local_db:\n    image: postgres\n    restart: always\n    volumes:\n      - pgdata:/var/lib/postgresql/data/\n    environment:\n      POSTGRES_USER: ${DB_USER_LOCAL}\n      POSTGRES_PASSWORD: ${DB_PASS_LOCAL}\n      POSTGRES_DB: ${DB_NAME_LOCAL}\n      TZ: ${TZ}\n      POSTGRES_HOST_AUTH_METHOD: trust\n    healthcheck:\n      test: [\"CMD\", \"mysqladmin\", \"ping\", \"-h\", \"${DB_HOST_LOCAL}\"]\n      interval: 5s\n      timeout: 1s\n      retries: 10\n    healthcheck:\n      test:\n        [\n          \"CMD-SHELL\",\n          \"pg_isready -U ${DB_USER_LOCAL} -d ${DB_NAME_LOCAL} -h ${DB_HOST_LOCAL} -p ${DB_PORT_LOCAL}\",\n        ]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n    hostname: ${DB_HOST_LOCAL}\n\nvolumes:\n  pgdata:\n</code></pre> <p>The <code>local_db</code> instance uses the named volume <code>pgdata</code>. This way, changes to the database will persist whenever we restart the container.</p> <p>Note</p> <p>Container data gets wiped every time you bring down a service!</p>"},{"location":"dashboard.html#connecting-to-the-database","title":"Connecting to the database","text":"<p>Docker compose's DNS allows the host name for the local database to automatically match the service name. This is super convenient because we don't need to keep track of ip addresses explicitly.</p> <pre><code>  app:\n    image: my-flask-app:latest\n    build:\n      context: app\n      dockerfile: app.Dockerfile\n    depends_on:\n      - local_db\n    environment:\n      - DB_HOST=local_db\n      - DB_PORT=${DB_PORT_LOCAL}\n      - DB_USER=${DB_USER_LOCAL}\n      - DB_PASS=${DB_PASS_LOCAL}\n      - DB_NAME=${DB_NAME_LOCAL}\n    volumes:\n      - ./app:/usr/src/app\n    depends_on:\n      - local_db\n    ports:\n      - \"8050:8050\"\n</code></pre> <p>Here is how the app uses the environment variables to connect to the database </p> <pre><code>from sqlalchemy import create_engine\n# Create an engine for connecting to the PostgreSQL database\nengine = create_engine(\n    f'postgresql://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}',\n    pool_size=10,  # Adjust pool_size and max_overflow to your needs\n    max_overflow=20\n)\n</code></pre> <p>When you run the app, you'll see output in the terminal</p> <pre><code>connecting to db at: postgresql://postgres_user:****@local_db:5432/postgres\n</code></pre> <p>We can embed the dashboard as an iframe. Because we are accessing the app from the host, we need to use <code>localhost</code>:</p> <pre><code>&lt;iframe src=\"http://localhost:8050\" width=\"1400\" height=\"1200\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"environment.html","title":"Environment","text":"<p>Environment variables are used to pass information into the container at run time.</p> <p>This allows you to build an image once but run it with different configurations (API Keys, passwords, etc) or for different environments (development vs production).</p> <p>Typically, environment variables flow like this:</p> <p><code>.env</code> --&gt; <code>docker-compose.yml</code> --&gt; <code>container</code> --&gt; <code>application</code></p>"},{"location":"environment.html#env","title":".env","text":"<p>Environment variables are typically placed in a <code>.env</code> file at the base of the repo. Docker automatically looks for <code>.env</code> when running the compose configuration. Here are the contents of this project's <code>.env</code>:</p> <pre><code>#mkdocs\nSITE_NAME=\"Plebnet Compose (Oct 21, 2023)\"\n\n#local db\nDB_HOST_LOCAL=db_local\nDB_HOST_LOCAL_PROD=db_local_prod\nDB_USER_LOCAL=postgres_user\nDB_PASS_LOCAL=mypass\nDB_PORT_LOCAL=5432\nDB_NAME_LOCAL=postgres\n</code></pre> <p>Warning</p> <p><code>.env</code> contains sensitive information, you should NEVER add a .env file to git control. <code>.env</code> files are often included in <code>.gitignore</code> to prevent accidental upload.</p>"},{"location":"environment.html#docker-composeyml","title":"docker-compose.yml","text":"<p>You can pass environment variables to your services using curly braces <code>${MY_ENV_VAR}</code>, like this:</p> <pre><code># docker-compose.yml\n    ...\n    environment:\n      SITE_NAME: ${SITE_NAME}\n</code></pre>"},{"location":"environment.html#container","title":"container","text":"<p>Once provisioned by the compose file, the container's environment variables have been set. You can log in and verify these values for the <code>docs</code> service:</p> <pre><code>docker compose run docs bash\n\n(base) root@4abd4921d273:/code# echo $SITE_NAME\nPlebnet Compose (Oct 21 '03)\n</code></pre>"},{"location":"environment.html#application","title":"application","text":"<p>Your application can (finally) access these values. How this is done depends on the language your app is written in. For example, in python it would be</p> <pre><code>import os\n\nprint(os.environ['SITE_NAME'])\n</code></pre> <p>For this project, <code>SITE_NAME</code> is picked up by this secion of <code>mkdocs.yml</code> (in the base of this repo):</p> <pre><code># Project information\nsite_name: !ENV [SITE_NAME, \"Plebnet Compose\"] # if SITE_NAME is undefined, use Plebnet Compose\n</code></pre> <p>Note</p> <p>Your app needs to handle cases where an environment variable is missing</p>"},{"location":"images.html","title":"Images","text":"<p>A Docker <code>image</code> is a lightweight, stand-alone, executable software package that includes everything needed to run a piece of software, including the code, a runtime, libraries, environment variables, and config files.</p> <p>Images are just data identfiable with hashes. Think of them like bootable disks:</p>  f3d495355b4e  <p>Images contain</p> <ul> <li>Code - The actual code that runs your application.</li> <li>Runtime - The runtime environment where your code executes, for instance, Node.js, Python, or Java runtime.</li> <li>Libraries - Any libraries or frameworks your code depends on.</li> <li>Environment Variables - Configurable parameters your code uses to interact with its environment.</li> <li>Config Files - Configuration files which might contain settings or setup information for your application.</li> <li>Dependencies - Other resources or files your application needs to run.</li> </ul>"},{"location":"images.html#image-registries","title":"Image Registries","text":"<p>Images may stored locally or hosted on various registries</p> <ul> <li>Docker Hub - this is the default registry for pulling/pushing</li> <li>Google Container Registry (GCR)</li> <li>Amazon Elastic Container Registry (ECR)</li> <li>Azure Container Registry (ACR)</li> </ul>"},{"location":"motivation.html","title":"Motivation","text":"<p>Containers are like very thin virtual machines. We summarize the benefits of this approach below</p>"},{"location":"motivation.html#isolation","title":"isolation","text":"<ul> <li>all requirements are self-contained within an os tailored for the app</li> <li>no dependency conflicts on the host</li> <li>inheritance</li> </ul>"},{"location":"motivation.html#reproducibility","title":"reproducibility","text":"<ul> <li>running the same container years later should produce the same results</li> <li>production version should operate similar to development</li> </ul> <p>The same container can be developed on a laptop and deployed to cloud AWS/Google/Azure or decentralzed environments (Start9/Umbrel)</p>"},{"location":"motivation.html#modularity","title":"modularity","text":"<p>containers can be built up in layers</p> <ul> <li>base layer typically some version of ubuntu</li> <li>upper layers are progressively more app-specific</li> </ul> <p>apps can consist of multiple containers deployed in concert</p> <ul> <li>docker compose (plebnet-playground, Start-9, Umbrel)</li> </ul>"},{"location":"motivation.html#deployment","title":"deployment","text":"<p>Many deployment technologies exist to host your applications on the web</p> <ul> <li>Kubernetes (general, supported by AWS, Google, etc)</li> <li>Amazon ECS (Elastic Container Service)</li> <li>Google Kubernetes Engine (GKE)</li> <li>Azure Kubernetes Service (AKS)</li> <li>Kubernetes on DigitalOcean</li> <li>Heroku</li> </ul>"},{"location":"motivation.html#security","title":"security","text":"<p>Containers provide a low risk way to runing other people's apps</p> <ul> <li>host explicitly controls what the container has access to (data paths, network, etc)</li> </ul> <p>Note: other containerizing solutions may be more secure than docker</p> <ul> <li> <p>Podman A daemon-less architecture allowing you to create containers without root access, potentially enhancing security</p> </li> <li> <p>Buildah allows building Open Container Initiative (OCI) container images without a standalone container runtime or daemon, focusing on creating OCI images without Dockerfiles and without needing root privileges.</p> </li> </ul>"},{"location":"network.html","title":"Network","text":"<p>When you run a compose stack, docker sets up mini-network so the containers can communicate with to each other using web protocols.</p>"},{"location":"network.html#ports","title":"Ports","text":"<p>Services may include a <code>ports</code> section that maps a container's port to the host machine so it may be accessed over localhost</p> <pre><code>    ports:\n      - \"8000:8000\"\n</code></pre>"},{"location":"network.html#dns-resolution","title":"DNS resolution","text":"<p>Services may contact each other using their host name, which automatically resolves to the container's ip address.</p> <p>See the Dashboard Example to see how this is utilized to connect to a local database.</p>"},{"location":"run.html","title":"Run","text":""},{"location":"run.html#running-the-container-the-hard-way","title":"running the container (the hard way)","text":"<p><code>docker run</code></p> <ul> <li>This is the basic command used to create and start a container from a specified Docker image.</li> </ul> <pre><code>docker run --rm -v $PWD:/code -p 8000:8000 --name plebnet-container plebnet-compose\n</code></pre> <p><code>--rm</code></p> <ul> <li>This option tells Docker to automatically remove the container when it exits, which helps to keep your system clean by removing containers you no longer need.</li> </ul> <p><code>-v $PWD:/code</code></p> <ul> <li>The <code>-v</code> option is used to create a volume, which allows you to share files between your host system and the container.</li> <li><code>$PWD</code> is an environment variable that holds the current working directory on your host system.</li> <li><code>:/code</code> specifies the path inside the container where the host system's current working directory will be mounted.</li> </ul> <p>So, <code>-v $PWD:/code</code> maps the current working directory on your host system to /code inside the container, allowing files to be shared between the two.</p> <p><code>-p 8000:8000:</code></p> <ul> <li>The <code>-p</code> option is used to map a port on your host system to a port on the container.</li> <li><code>8000:8000</code> maps port <code>8000</code> on your host system to port <code>8000</code> on the container, allowing network traffic to be forwarded between them.</li> </ul> <p><code>--name plebnet-container</code></p> <ul> <li>The <code>--name</code> option allows you to specify a name for the container, making it easier to identify and manage. plebnet-container is the name you've chosen for this container.</li> </ul> <p><code>plebnet-compose</code></p> <p>This is the name of the Docker image from which you want to create the container. The docker run command will create a new container from the plebnet-compose image, using the options specified.</p> <p>Together, this command will create and start a new container named plebnet-container from the plebnet-compose image, with the current working directory on your host system mounted to /code inside the container, and port 8000 on your host system mapped to port 8000 on the container. The container will be automatically removed when it exits due to the --rm option.</p>"},{"location":"run.html#stopping-the-container","title":"stopping the container","text":"<pre><code>docker stop plebnet-container\n</code></pre>"},{"location":"volumes.html","title":"Volumes","text":""},{"location":"volumes.html#volumes","title":"Volumes","text":"<p>Docker volumes are used to persist data from the host to the container. Volumes are necessary when</p> <ul> <li>Host files need to be passed into and modified by the container</li> <li>Databases need to persist accross multiple runs of the same container</li> <li>In development mode, when code needs to be modified on the host (to avoid rebuilding constantly)</li> </ul>"},{"location":"volumes.html#volume-mounts","title":"Volume Mounts","text":"<p>\"Volume Mounts\" are used to mount directories from the host into the container.</p> <p>For instance, our documentation image doesn't actually contain this project's code until run time. This is accomplished by the following line in our <code>docker-compose.yml</code></p> <pre><code>    volumes:\n      - .:/code\n</code></pre> <p>This means mount <code>.</code> (the current working directory) into the container's <code>/code</code> directory. When the container starts, it uses <code>/code</code> as the working directory so that <code>mkdocs</code> will automatically refresh any changes to the documentation. You can test this by modifying this file on your host system.</p>"},{"location":"volumes.html#named-volumes","title":"Named Volumes","text":"<p>Named volumes are used to persist and share data between containers in a Docker Compose environment. A typical use case is when you have a database running in one service that another service needs to access.</p> <p>To show existing volumes:</p> <pre><code>docker volume ls\n...\nlocal     plebnet-compose_pgdata\n</code></pre> <p>To delete a volume, first bring down any containers that are currently using it</p> <pre><code>docker compose down\ndocker volume rm plebnet-compose_pgdata\n</code></pre> <p>We'll see how we utilize volumes when running an example Dashboard application</p>"},{"location":"worklog.html","title":"WorkLog","text":""},{"location":"worklog.html#labor-report","title":"Labor report","text":"<p>The graph and logs below keep track of Asher's labor on this project.</p>"},{"location":"worklog.html#worklog","title":"WorkLog","text":""},{"location":"worklog.html#2023-10-21-184032111283-clock-out","title":"2023-10-21 18:40:32.111283: clock-out","text":"<ul> <li>loaded lnd graph data</li> </ul>"},{"location":"worklog.html#2023-10-21-163421663505-clock-in","title":"2023-10-21 16:34:21.663505: clock-in","text":""},{"location":"worklog.html#2023-10-21-151254889684-clock-out","title":"2023-10-21 15:12:54.889684: clock-out","text":"<ul> <li>dashboard working in docs</li> </ul>"},{"location":"worklog.html#2023-10-21-105643961796-clock-in","title":"2023-10-21 10:56:43.961796: clock-in","text":""},{"location":"worklog.html#2023-10-21-102119595816-clock-out","title":"2023-10-21 10:21:19.595816: clock-out","text":"<ul> <li>refactor to psidash</li> </ul>"},{"location":"worklog.html#2023-10-21-085456123505-clock-in","title":"2023-10-21 08:54:56.123505: clock-in","text":""},{"location":"worklog.html#2023-10-20-235137627824-clock-out","title":"2023-10-20 23:51:37.627824: clock-out","text":"<ul> <li>working dashboard</li> </ul>"},{"location":"worklog.html#2023-10-20-222620308425-clock-in","title":"2023-10-20 22:26:20.308425: clock-in","text":""},{"location":"worklog.html#2023-10-20-183001600600-clock-out","title":"2023-10-20 18:30:01.600600: clock-out","text":"<ul> <li>added flask app</li> </ul>"},{"location":"worklog.html#2023-10-20-164101592920-clock-in","title":"2023-10-20 16:41:01.592920: clock-in","text":""},{"location":"worklog.html#2023-10-18-182336573817-clock-out","title":"2023-10-18 18:23:36.573817: clock-out","text":"<ul> <li>environment, volumes, worklog</li> </ul>"},{"location":"worklog.html#2023-10-18-165929957691-clock-in-t-20m","title":"2023-10-18 16:59:29.957691: clock-in: T-20m","text":""},{"location":"worklog.html#2023-10-15-212745713558-clock-out-t-27m","title":"2023-10-15 21:27:45.713558: clock-out: T-27m","text":"<ul> <li>config env variables, deployment</li> <li>https://github.com/settings/personal-access-tokens/new</li> </ul>"},{"location":"worklog.html#2023-10-15-200104467552-clock-in","title":"2023-10-15 20:01:04.467552: clock-in","text":""},{"location":"worklog.html#2023-10-14-171247980772-clock-out","title":"2023-10-14 17:12:47.980772: clock-out","text":"<ul> <li>slimmer image, refactor</li> <li>docker build and run, compose</li> </ul>"},{"location":"worklog.html#2023-10-14-145459857191-clock-in","title":"2023-10-14 14:54:59.857191: clock-in","text":""},{"location":"worklog.html#2023-10-13-221919783865-clock-out-t-10m","title":"2023-10-13 22:19:19.783865: clock-out: T-10m","text":"<ul> <li>set up compose docs site</li> </ul>"},{"location":"worklog.html#2023-10-13-212429669610-clock-in-t-5m","title":"2023-10-13 21:24:29.669610: clock-in: T-5m","text":""}]}